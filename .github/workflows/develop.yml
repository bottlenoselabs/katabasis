name: "Develop"

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CORE_SDK_VERSION: 5.0.400

on:
  push:
    branches: [develop]
    tags: [v*]

jobs:

  version-job:
    name: "GitVersion"
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout Git repository"
      uses: actions/checkout@v2
      with:
        ref: ${{ env.GITHUB_REF }}

    - name: "Fetch all history for all tags and branches"
      run: git fetch --prune --unshallow

    - name: "Install GitVersion"
      uses: gittools/actions/gitversion/setup@v0.9.6
      env: 
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # workaround for https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ until the execute action is updated
      with:
        versionSpec: '5.x'
          
    - name: "Use GitVersion"
      uses: gittools/actions/gitversion/execute@v0.9.6

    - run: echo "$GitVersion_NuGetVersionV2" >> version.txt

    - name: "Upload version artifact"
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version.txt

  build-native-job:
    name: "Build native libraries ${{ matrix.platform.rid }}"
    needs: [version-job]
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
        - { name: Windows (x64), os: ubuntu-latest, rid: win-x64, TARGET_BUILD_OS: microsoft, TARGET_BUILD_ARCH: x86_64 }
        - { name: Linux (x64), os: ubuntu-latest, rid: linux-x64, TARGET_BUILD_OS: linux, TARGET_BUILD_ARCH: x86_64 }
        - { name: macOS (x64), os: macos-latest, rid: osx-x64, TARGET_BUILD_OS: apple, TARGET_BUILD_ARCH: x86_64 }
        - { name: macOS (arm64), os: macos-latest, rid: osx-arm64, TARGET_BUILD_OS: apple, TARGET_BUILD_ARCH: arm64 }
    steps:

    - name: "Clone Git repository"
      uses: actions/checkout@master
      with:
        ref: ${{ env.GITHUB_REF }}
        submodules: 'recursive'

    - name: "Build native libraries (Windows)"
      if: ${{ startsWith(matrix.platform.rid, 'win') }}
      shell: bash
      run: sudo apt-get update -y && sudo apt-get install -y mingw-w64 && ./library.sh microsoft

    - name: "Build native libraries (Unix)"
      if: ${{ !(startsWith(matrix.platform.rid, 'win')) }}
      shell: bash
      run: ./library.sh "${{ matrix.platform.TARGET_BUILD_OS }}" "${{ matrix.platform.TARGET_BUILD_ARCH }}"

    - name: "Upload native libraries"
      uses: actions/upload-artifact@v2
      with:
        name: "native-libraries-${{ matrix.platform.rid }}"
        path: './lib'

  dotnet-build-job:
    name: ".NET build"
    needs: [build-native-job]
    runs-on: ubuntu-latest
    steps:

    - name: "Clone Git repository"
      uses: actions/checkout@master
      with:
        ref: ${{ env.GITHUB_REF }}
        submodules: 'recursive'

    - name: "Setup .NET CLI"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ env.DOTNET_CORE_SDK_VERSION }}'

    - name: "Download native libraries (win-x64)"
      uses: actions/download-artifact@v1
      with:
        name: "native-libraries-win-x64"
        path: './lib'

    - name: "Download native libraries (linux-x64)"
      uses: actions/download-artifact@v1
      with:
        name: "native-libraries-linux-x64"
        path: './lib'

    - name: "Download native libraries (osx-x64)"
      uses: actions/download-artifact@v1
      with:
        name: "native-libraries-osx-x64"
        path: './lib'

    - name: "Download version artifact"
      uses: actions/download-artifact@v2
      with:
        name: version

    - name: "Read Version"
      id: version
      shell: bash
      run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

    - name: "Build solution"
      run: dotnet build --nologo --configuration Release /p:Version='${{ env.VERSION }}'

    - name: "Test solution"
      run: dotnet test --nologo --configuration Release --no-build













